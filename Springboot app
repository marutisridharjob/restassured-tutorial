a dynamic test case setup for your Spring Boot REST application, which contains two endpoints: one that takes /year/{year} and another that takes /model/{model}, both returning a list of cars in JSON format. This includes creating separate configuration files, test data, and expected results with an automated report generation setup using Maven, JUnit 5, RestAssured, and Allure.

Project Structure

project-root
│
├── src
│   ├── main
│   │   └── java
│   │       └── com
│   │           └── example
│   │               └── demo
│   │                   └── DemoApplication.java
│   │                   └── controller
│   │                       └── VehicleController.java
│   │                   └── model
│   │                       └── Vehicle.java
│   │                   └── service
│   │                       └── VehicleService.java
│   └── test
│       └── java
│           └── com
│               └── example
│                   └── demo
│                       └── VehicleApiTest.java
│       └── resources
│           ├── config_website1.properties
│           ├── config_website2.properties
│           ├── year_test_data.csv
│           └── model_test_data.csv
├── pom.xml
└── README.md

1. pom.xml Configuration

Here’s a pom.xml that includes dependencies for Spring Boot, JUnit 5, RestAssured, Maven Surefire, and Allure for test reporting:

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Spring Boot Dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>

        <!-- RestAssured -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>4.5.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Allure RestAssured -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-rest-assured</artifactId>
            <version>2.13.9</version>
            <scope>test</scope>
        </dependency>

        <!-- Allure JUnit 5 -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-junit5</artifactId>
            <version>2.13.9</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven Surefire Plugin for running tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
            </plugin>

            <!-- Allure Maven Plugin -->
            <plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>2.13.9</version>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>website1</id>
            <properties>
                <configFile>src/test/resources/config_website1.properties</configFile>
            </properties>
        </profile>

        <profile>
            <id>website2</id>
            <properties>
                <configFile>src/test/resources/config_website2.properties</configFile>
            </properties>
        </profile>
    </profiles>
</project>


2. Configuration Files

config_website1.properties

base.url=http://localhost:8080
year.endpoint=/year/{year}
model.endpoint=/model/{model}

config_website2.properties

base.url=http://localhost:8081
year.endpoint=/year/{year}
model.endpoint=/model/{model}

3. Test Data Files

year_test_data.csv

year,expectedStatusCode,expectedYear
1995,200,1995
2000,200,2000
2023,404,null

model_test_data.csv

model,expectedStatusCode,expectedMake,expectedModel,expectedYear
Accord,200,Honda,Accord,2010
Camry,200,Toyota,Camry,2015
Unknown,404,null,null,null

4. Spring Boot REST Controller (VehicleController.java)

@RestController
@RequestMapping("/vehicles")
public class VehicleController {

    private final VehicleService vehicleService;

    public VehicleController(VehicleService vehicleService) {
        this.vehicleService = vehicleService;
    }

    @GetMapping("/year/{year}")
    public ResponseEntity<List<Vehicle>> getByYear(@PathVariable int year) {
        List<Vehicle> vehicles = vehicleService.getVehiclesByYear(year);
        return vehicles.isEmpty() ? ResponseEntity.notFound().build() : ResponseEntity.ok(vehicles);
    }

    @GetMapping("/model/{model}")
    public ResponseEntity<List<Vehicle>> getByModel(@PathVariable String model) {
        List<Vehicle> vehicles = vehicleService.getVehiclesByModel(model);
        return vehicles.isEmpty() ? ResponseEntity.notFound().build() : ResponseEntity.ok(vehicles);
    }
}


5. Spring Boot Service Layer (VehicleService.java)

@Service
public class VehicleService {

    private static List<Vehicle> vehicles = new ArrayList<>();

    static {
        vehicles.add(new Vehicle("Honda", "Accord", 2010));
        vehicles.add(new Vehicle("Toyota", "Camry", 2015));
        vehicles.add(new Vehicle("Ford", "Mustang", 2000));
    }

    public List<Vehicle> getVehiclesByYear(int year) {
        return vehicles.stream().filter(v -> v.getYear() == year).collect(Collectors.toList());
    }

    public List<Vehicle> getVehiclesByModel(String model) {
        return vehicles.stream().filter(v -> v.getModel().equalsIgnoreCase(model)).collect(Collectors.toList());
    }
}

6. JUnit 5 Dynamic Test Code (VehicleApiTest.java)

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvFileSource;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class VehicleApiTest {

    private static String baseUrl;
    private static String yearEndpoint;
    private static String modelEndpoint;

    @BeforeAll
    public static void setup() throws IOException {
        String configFile = System.getProperty("configFile", "src/test/resources/config_website1.properties");

        Properties properties = new Properties();
        FileInputStream configStream = new FileInputStream(configFile);
        properties.load(configStream);

        baseUrl = properties.getProperty("base.url");
        yearEndpoint = properties.getProperty("year.endpoint");
        modelEndpoint = properties.getProperty("model.endpoint");
    }

    @ParameterizedTest
    @CsvFileSource(resources = "/year_test_data.csv", numLinesToSkip = 1)
    void testGetVehicleByYear(int year, int expectedStatusCode, String expectedYear) {
        RestAssured.baseURI = baseUrl;

        Response response = given()
            .pathParam("year", year)
            .when()
            .get(yearEndpoint)
            .then()
            .statusCode(expectedStatusCode)
            .extract().response();

        if (expectedYear != null) {
            response.then().body("year", equalTo(Integer.parseInt(expectedYear)));
        }
    }

    @ParameterizedTest
    @CsvFileSource(resources = "/model_test_data.csv", numLinesToSkip = 1)
    void testGetVehicleByModel(String model, int expectedStatusCode, String expectedMake, String expectedModel, String expectedYear) {

        RestAssured.baseURI = baseUrl;

        Response response = given()
            .pathParam("model", model)
            .when()
            .get(modelEndpoint)
            .then()
            .statusCode(expectedStatusCode)
            .extract().response();

        if (expectedMake != null && expectedModel != null && expectedYear != null) {
            response.then().body("make", equalTo(expectedMake))
                    .body("model", equalTo(expectedModel))
                    .body("year", equalTo(Integer.parseInt(expectedYear)));
        }
    }
}


7. One-Step Execution for All Tests and Report Generation

You can run the tests and generate the Allure report with a single command:

mvn test allure:serve

This command will:

	1.	Run tests across all profiles (e.g., website1, website2).
	2.	Serve the Allure report immediately after the tests are executed.



